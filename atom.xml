<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cheerioInf&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-20T09:46:41.748Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>cheerioInf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「犀牛书」 第一章 JS简介</title>
    <link href="http://example.com/2022/09/17/%E3%80%8C%E7%8A%80%E7%89%9B%E4%B9%A6%E3%80%8D-%E7%AC%AC%E4%B8%80%E7%AB%A0-JS%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2022/09/17/%E3%80%8C%E7%8A%80%E7%89%9B%E4%B9%A6%E3%80%8D-%E7%AC%AC%E4%B8%80%E7%AB%A0-JS%E7%AE%80%E4%BB%8B/</id>
    <published>2022-09-17T14:30:50.000Z</published>
    <updated>2022-09-20T09:46:41.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-JavaScript-简介"><a href="#第一章-JavaScript-简介" class="headerlink" title="第一章 JavaScript 简介"></a>第一章 JavaScript 简介</h1><blockquote><p>JavaScript 是一门 Web 编程语言，绝大多数网站都使用 JavaScript，所有现代 Web 浏览器都包含 JavaScript 解释器。同时 Node.js 让浏览器之外的 JavaScript 编程称为可能。</p><p>JavaScript 是一门高级、动态、解释型、弱类型编程语言，非常适合面向对象和函数式编程风格。每种语言都必须有一个平台或标准库来执行最基本的操作，核心 JavaScript 语言定义了最小限度的 API ，可以操作数值、文本、数组、集合、映射等，但不包含任何输入输出功能。输入输出功能以及更复杂的的特性是内嵌 JavaScript 的「宿主环境」的责任。</p><p>浏览器是 JavaScript 最早、最常用的宿主环境，其允许 JavaScript 代码从鼠标、键盘、发送 HTTP 请求获取输入，也允许 JavaScript 代码通过 HTML 和 CSS 向用户显示输出。</p><p>2020 年以后，JavaScript 又有了服务器的宿主环境，Node 给予了 JavaScript 访问整个操作系统的权限，允许其读写文件、通过网络发送和接收数据、发送和处理 HTTP 请求。Node 是实现 Web 服务器的一种流行方式，也是便携可以替代 Shell 脚本的简单实用的脚本的便捷工具。</p></blockquote><h2 id="1-0-🎲-JavaScript：名字、版本、模式"><a href="#1-0-🎲-JavaScript：名字、版本、模式" class="headerlink" title="1.0 🎲 JavaScript：名字、版本、模式"></a>1.0 🎲 JavaScript：名字、版本、模式</h2><p>JavaScript 最初是由网景公司（Netscape）创建的，最开始的命名为 LiveScript，后来网景公司与 sun 公司（ Java 语言的创建公司）合作，为了推广 LiveScript 这门语言（蹭热度），将其改名为 JavaScript 。因此 JavaScript 和 Java 的关系，就好比雷锋和雷峰塔、老婆和老婆饼一样，基本毫无关系。后来网景公司又将这门语言交给 Ecma International 进行标准化，由于商标问题，只能采用 ECMAScript 这个有点别扭的名字。</p><p>2010 年之后，所有的浏览器都支持 ES 标准第 5 版，ES6 发布于 2015 年，增加了很多重要的新特性。此后，ECMAScript 规范改为每年发布一次，语言的版本也由年份来标识，如 ES2017，ES20120，ES2021 等。</p><p>在 ES5 及以后，程序可以选择切换到严格模式（use strict），在这种模式下，之前 ES5 部分缺陷得以纠正。ES6 之后很多情况会隐式触发严格模式，如使用 <code>class</code> 关键字或者创建 ES6 模块，类和模块中的代码都会自动切换到严格模式。</p><h2 id="1-1-🛵-Hello-World"><a href="#1-1-🛵-Hello-World" class="headerlink" title="1.1 🛵 Hello World"></a>1.1 🛵 Hello World</h2><p>首先，我们可以创建一个新文件<code>hello.js</code>，其中包含代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果想要用 Node 来运行这个 JavaScript 代码，我们可以直接在终端输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node hello.<span class="property">js</span></span><br></pre></td></tr></table></figure><p>如果想在浏览器的控制台打印 “Hello World” ，再创建一个新文件<code>hello.html</code>，把以下内容放进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;hello.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在浏览器中使用 <code>file://URL</code> 来加载 <code>hello.html</code>。</p><h2 id="1-2-📺-JavaScript-之旅"><a href="#1-2-📺-JavaScript-之旅" class="headerlink" title="1.2 📺 JavaScript 之旅"></a>1.2 📺 JavaScript 之旅</h2><ul><li><p>变量是一个表示值的名字。</p></li><li><p>变量可以用 <code>let</code> 关键字声明。</p></li><li><p>可以使用 <code>=</code> 来对变量赋值。</p></li><li><p>js 支持 Number、String、Boolean、Null、Undefined、BigInt、Symbol 等基础数据类型。</p></li><li><p>js 也支持 Object、Array、Function 等引用数据类型。</p></li><li><p>可以使用 <code>.</code> 和 <code>[]</code> 来访问对象的属性。</p></li><li><p><code>// =&gt;</code> 表示注释前面代码产生的值。</p></li><li><p>了解各种操作符。</p></li><li><p>&amp;&amp; 运算遇到假值返回假值，后面不再执行，若无假值，返回最后一个值。</p></li><li><p>|| 运算遇到真值返回真值，后面不再执行，若无真值，返回最后一个值。</p></li><li><p>&amp;&amp; 运算优先级比 || 大。</p></li><li><p>箭头函数用 &#x3D;&gt; 来分隔参数列表和函数主体。</p></li><li><p>通过对象调用的函数，我们称为方法。</p></li><li><p>面向对象编程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">distance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span> * <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * <span class="variable language_">this</span>.<span class="property">y</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">distance</span>()) <span class="comment">// =&gt; 1.4142135623730951</span></span><br></pre></td></tr></table></figure><p>上例为计算某点到原点的距离。</p></li></ul><h2 id="1-3-🏈-事例：字符频率柱形图"><a href="#1-3-🏈-事例：字符频率柱形图" class="headerlink" title="1.3 🏈 事例：字符频率柱形图"></a>1.3 🏈 事例：字符频率柱形图</h2><p>太难了呜呜 🥹</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-JavaScript-简介&quot;&gt;&lt;a href=&quot;#第一章-JavaScript-简介&quot; class=&quot;headerlink&quot; title=&quot;第一章 JavaScript 简介&quot;&gt;&lt;/a&gt;第一章 JavaScript 简介&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    
    <category term="犀牛书" scheme="http://example.com/tags/%E7%8A%80%E7%89%9B%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现天气预报查询系统</title>
    <link href="http://example.com/2022/09/14/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/09/14/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-09-14T12:29:34.000Z</published>
    <updated>2022-09-18T14:20:55.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Weather-Query-System"><a href="#Weather-Query-System" class="headerlink" title="Weather Query System"></a>Weather Query System</h1><p>该项目是我参加学校工作室后的第一次水平考核，也是我学习前端一个月以来完成的第一个较为完整的小项目。故有许多细节实现的不符合预期。借这篇文章复盘一下我的项目完成过程，来为以后更好地完成项目打定基础。</p><h2 id="🏝-项目整体结构想法"><a href="#🏝-项目整体结构想法" class="headerlink" title="🏝 项目整体结构想法"></a>🏝 项目整体结构想法</h2><p>作为一个天气预报查询系统，首先我将项目分为查询、反馈两个部分。</p><p><strong>查询</strong>：需要考虑 <em>查询方式</em> 以及 <em>查询范围</em> 两个方面。方式可以有多种，如输入文字、进入城市列表选择、在地图上选择区域等。范围分为国内与国外、省与区等方面。但在实际实现过程中，由于技术熟练度和掌握度不高、接口有限等，仅实现了文字查询+国内的省与区范围查询。</p><p><strong>反馈</strong>：需要考虑返回给用户什么内容，在我目前能找到的接口中，总结了以下 4 个方面的反馈：</p><ul><li>实况天气，即当地当天当时的即时天气。</li><li>空气质量水平。</li><li>未来七天预测天气。</li><li>生活指数，如运动指数、钓鱼指数等。</li></ul><h2 id="☎️-HTML-页面的编写"><a href="#☎️-HTML-页面的编写" class="headerlink" title="☎️ HTML 页面的编写"></a>☎️ HTML 页面的编写</h2><p>首先我将 HTML 界面划分为<code>&lt;header&gt;</code>、<code>&lt;search&gt;</code>、<code>&lt;information&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;toasts&gt;</code>五大板块。</p><p><code>&lt;header&gt;</code>用来编写悬浮导航栏，包含<code>&lt;title&gt;</code>和<code>&lt;top&gt;</code>两个小板块，分别是 Weather Query System 的文字图标和返回顶部的按钮。</p><p><code>&lt;search&gt;</code>是搜索模块，包括<code>&lt;search-title&gt;</code>和<code>search-box</code>两个小板块，分别为 Weather Query System 的标题、搜索框。搜索框又包含<code>&lt;input&gt;</code>和<code>&lt;button&gt;</code>。</p><p><code>&lt;information&gt;</code>是反馈给用户信息的界面，包含上面‘反馈’部分提到的各个功能板块。</p><p><code>&lt;footer&gt;</code>为页底部分，反馈给用户我的数据来源网站。</p><h2 id="🧭-CSS-以及动画的编写"><a href="#🧭-CSS-以及动画的编写" class="headerlink" title="🧭 CSS 以及动画的编写"></a>🧭 CSS 以及动画的编写</h2><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><code>&lt;header&gt;</code>板块 <em>一直固定</em> 在页面 <em>最上面</em> ，故需要我们给它设置<code>position</code>属性为<code>fixed</code>、<code>top</code>属性值为 0。其次为了防止被之后编写的板块覆盖，需要给它的<code>z-index</code>属性设置足够大的高度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=========导航栏部分编写==========*/</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="search-title"><a href="#search-title" class="headerlink" title="search-title"></a>search-title</h3><p>单纯的静态 title 有点无聊，因此我想添加 <em>自动打字效果</em> 来在用户进入界面后，通过动画展现出来。</p><p>首先利用 js 获取<code>&lt;search-title&gt;</code>的节点(节点内容为空)，并在 js 中声明赋值标题的字符串变量，声明赋值字符位置变量<code>idx</code>为 1，通过<code>slice</code>方法将定义的标题字符串逐字添加到获取的节点之中，并再添加一个<code>_</code>字符在后面，同时设置 idx++。这样当下次函数执行时，会覆盖掉前一次打印的<code>_</code>，从而实现自动打印效果。其次设置打印的速度<code>speed</code>，通过<code>setTimeOut</code>函数来延时打印。最后设置如果<code>idx</code>的长度大于标题字符串的长度，则将倒数第一个字符串删除（即<code>_</code>），退出打印。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================打印title===========================</span></span><br><span class="line"><span class="keyword">const</span> textEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tips&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Weather Forecast System&#x27;</span></span><br><span class="line"><span class="keyword">let</span> idx = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> speed = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">;(<span class="keyword">function</span> <span class="title function_">writeText</span>(<span class="params"></span>) &#123;</span><br><span class="line">  textEl.<span class="property">innerText</span> = text.<span class="title function_">slice</span>(<span class="number">0</span>, idx++) + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(writeText, speed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (idx &gt; text.<span class="property">length</span>) &#123;</span><br><span class="line">    textEl.<span class="property">innerText</span> = textEl.<span class="property">innerText</span>.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="search-box"><a href="#search-box" class="headerlink" title="search-box"></a>search-box</h3><p>一个简单的<code>search-box</code>的实现仅需要<code>&lt;input&gt;</code>和<code>&lt;button&gt;</code>两个标签即可，但这种输入方式过于僵硬，因此想要在该处添加一些 CSS 动画来增加平滑度。</p><p>实现效果为提示文字在<code>input</code>框内，当用户聚焦<code>input</code>框时，提示文字平滑上移并改变颜色，同时<code>input</code>框下边框从中间向两边平滑变色。</p><p><strong>提示文字平滑上移改变颜色</strong>:<br>首先我们在<code>&lt;input&gt;</code>标签后面创建<code>&lt;label&gt;</code>标签，来填写我们的提示信息，设置<code>position</code>为<code>absolute</code>。给<code>label</code>添加<code>transition</code>属性，其值为 0.3s，表示提示信息向上移动的过程耗费时间为 0.3s。其次通过<code>input:focus ~ label</code>标签来设置 input 聚焦时的情形，并添加<code>transform: translateY(-2.5vw)</code>属性及其值，表示聚焦时提示文字上移 2.5 个 vw 单位。</p><p><strong>input 框下边框平滑变色</strong>:<br>设置<code>border-button</code>的<code>color</code>为灰色。新建标签<code>&lt;under-line&gt;</code>，设置<code>position</code>为<code>absolute</code>，<code>color</code>为蓝色，<code>transition</code>为 0.3s。最重要的是设置<code>transform</code>为 scaleX(0)，表示横线从原点处开始向外延伸的比例为 0。之后设置<code>input:focus ~ .underline</code>的 transform 为 scaleX(1)，表示横线从原点处开始向外延伸的比例为 1。</p><h3 id="information"><a href="#information" class="headerlink" title="information"></a>information</h3><p>对于 information 部分的 css 样式，其基础就是运用 flex 布局实现，不多叙述。重点在于相对单位的使用，尽量使用<code>vw</code>单位，时页面只会随窗口宽度的大小而改变。</p><h3 id="盒子平滑出现"><a href="#盒子平滑出现" class="headerlink" title="盒子平滑出现"></a>盒子平滑出现</h3><p>首先给<code>information</code>中展示功能的所有模块添加上共同的<code>class=“box”</code>。设置其<code>transition</code>值为<code>0.5s</code>，<code>transform</code>值为<code>translateX(2vw)</code>。</p><p>在 js 中获取所有 box 节点，并添加窗口滚动时触发<code>checkBoxes</code>，通过<code>window.innerHeight</code>获取浏览器窗口高度赋值给<code>triggerBottom</code>，在<code>boxes.forEach</code>中，通过<code>box.getBoundingClientRect().top</code>获取 box 顶部相对于视口(Viewport)的位置，赋值给<code>boxTop</code>。如果 boxTop 小于 triggerBottom 的时候，即 box 出现在窗口内时，添加上<code>class=“show”</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bf16ec33e9d4d5cb3b4044e4f2eb63d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=================css====================*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-class">.show</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================show box=========================</span></span><br><span class="line"><span class="keyword">const</span> boxes = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, checkBoxes)</span><br><span class="line"><span class="title function_">checkBoxes</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkBoxes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> triggerBottom = (<span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">20</span>) * <span class="number">19</span></span><br><span class="line"></span><br><span class="line">  boxes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">box</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boxTop = box.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (boxTop &lt; triggerBottom) &#123;</span><br><span class="line">      box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滑轮操作"><a href="#滑轮操作" class="headerlink" title="滑轮操作"></a>滑轮操作</h3><p>本次小项目涉及两处滑轮轮动问题，分别是搜索完成后自动跳转到到 information 板块的上面、以及点击导航栏的 top 按钮返回到顶部。</p><p><strong>搜索完成后自动跳转</strong>:<br>首先获取目标元素相对 Viewport 的 top 偏移值、窗口本身的偏移值之和，并设置每次移动的偏移值。通过 window.requestAnimationFrame()传入回调函数，来逐帧实现跳转效果。如下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//==========================搜索完成后自动跳转===========================</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animateScroll</span>(<span class="params">element, speed</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> rect = element.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="comment">//获取元素相对窗口的top值，加上窗口本身的偏移</span></span><br><span class="line">  <span class="keyword">let</span> top = <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + rect.<span class="property">top</span></span><br><span class="line">  <span class="keyword">let</span> currentTop = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> requestId</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line">    currentTop += speed</span><br><span class="line">    <span class="keyword">if</span> (currentTop &lt;= top) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, currentTop)</span><br><span class="line">      requestId = <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(step)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(step)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animateScroll</span>(inf, <span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>每次执行函数窗口会下移 80 的偏移值，直到偏移答道目标元素相对 Viewport 的 top 偏移值、窗口本身的偏移值之和。</p><p><strong>top 按钮返回到顶部</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================回到顶部===========================</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">loop</span>()</span><br><span class="line">  <span class="keyword">var</span> top,</span><br><span class="line">    stop = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (top &lt; <span class="number">1</span> || stop) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!stop) <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    top = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = top * <span class="number">0.9</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">loop</span>()</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (top &lt; <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>) &#123;</span><br><span class="line">      stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🧯-JS-的编写"><a href="#🧯-JS-的编写" class="headerlink" title="🧯 JS 的编写"></a>🧯 JS 的编写</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>将查询按钮绑定<code>click</code>事件，并绑定函数<code>search()</code>，将 search()设置为<code>async</code>函数，在内部运用<code>await</code>调用<code>fetch()</code>来获得数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">search</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;接口&#x27;</span>),</span><br><span class="line">    data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数据以组的形式出现时，我们可以用 document.querySelectorAll()的方法获取某个节点下的全部子节点，最后运用循环的方式将数据写入节点，如下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weekInf = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.w-box &gt; div &gt; div&#x27;</span>),</span><br><span class="line">  liveLevel = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.live &gt; div &gt; div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入week天气数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">weekUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt;= <span class="number">6</span>, i &lt;= <span class="number">24</span>; j++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data2.<span class="property">data</span>[j].<span class="property">date</span></span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data2.<span class="property">data</span>[j].<span class="property">wea</span></span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data2.<span class="property">data</span>[j].<span class="property">tem_day</span> + <span class="string">&#x27;°&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data2.<span class="property">data</span>[j].<span class="property">tem_night</span> + <span class="string">&#x27;°&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">weekUp.<span class="title function_">call</span>(weekInf)</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入live数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">liveUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= <span class="number">29</span>, j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data3.<span class="property">daily</span>[j].<span class="property">name</span> + <span class="string">&#x27;:&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = data3.<span class="property">daily</span>[j].<span class="property">level</span></span><br><span class="line">    <span class="variable language_">this</span>[i++].<span class="property">innerHTML</span> = <span class="string">&#x27;Tip：&#x27;</span> + data3.<span class="property">daily</span>[j].<span class="property">text</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">liveUp.<span class="title function_">call</span>(liveLevel)</span><br></pre></td></tr></table></figure><h3 id="判断是否输入为中文"><a href="#判断是否输入为中文" class="headerlink" title="判断是否输入为中文"></a>判断是否输入为中文</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取input内容</span></span><br><span class="line">cityName = inputCity.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则判断是否输入为中文</span></span><br><span class="line"><span class="keyword">let</span> han = <span class="regexp">/[\u4e00-\u9fa5]/</span>;</span><br><span class="line"><span class="keyword">if</span> (!han.<span class="title function_">test</span>(cityName)) &#123;</span><br><span class="line">    <span class="comment">//错误提示</span></span><br><span class="line">    <span class="title function_">createNotification2</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="吐司提示"><a href="#吐司提示" class="headerlink" title="吐司提示"></a>吐司提示</h3><p>当用户输入完成后，会在右下角会像吐司一样弹出输入成功 or 输入错误的反馈。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-id">#toasts</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">998</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toast</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toast</span><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">123</span>, <span class="number">49</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toast</span><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toast</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="comment">//===========================创建反馈弹窗===========================</span></span><br><span class="line"><span class="keyword">const</span> toasts = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;toasts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = [<span class="string">&#x27;查询成功&#x27;</span>, <span class="string">&#x27;输入有误，请重新输入&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;error&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入正确</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNotification1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> notice = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> noticePic = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  noticePic.<span class="property">src</span> = <span class="string">&#x27;./img/正确.png&#x27;</span></span><br><span class="line">  noticePic.<span class="property">width</span> = <span class="string">&#x27;45&#x27;</span></span><br><span class="line">  notice.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;toast&#x27;</span>)</span><br><span class="line">  notice.<span class="property">classList</span>.<span class="title function_">add</span>(types[<span class="number">0</span>])</span><br><span class="line">  notice.<span class="property">innerText</span> = messages[<span class="number">0</span>]</span><br><span class="line">  notice.<span class="title function_">appendChild</span>(noticePic)</span><br><span class="line">  toasts.<span class="title function_">appendChild</span>(notice)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    notice.<span class="title function_">remove</span>()</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入错误</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNotification2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> notice = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> noticePic = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  noticePic.<span class="property">src</span> = <span class="string">&#x27;./img/感叹号.png&#x27;</span></span><br><span class="line">  noticePic.<span class="property">width</span> = <span class="string">&#x27;40&#x27;</span></span><br><span class="line">  notice.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;toast&#x27;</span>)</span><br><span class="line">  notice.<span class="property">classList</span>.<span class="title function_">add</span>(types[<span class="number">1</span>])</span><br><span class="line">  notice.<span class="property">innerText</span> = messages[<span class="number">1</span>]</span><br><span class="line">  notice.<span class="title function_">appendChild</span>(noticePic)</span><br><span class="line">  toasts.<span class="title function_">appendChild</span>(notice)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    notice.<span class="title function_">remove</span>()</span><br><span class="line">  &#125;, <span class="number">13000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="百度地图-api-的调用"><a href="#百度地图-api-的调用" class="headerlink" title="百度地图 api 的调用"></a>百度地图 api 的调用</h3><p>跟着官网的说明文档操作即可。</p><h3 id="按钮节流"><a href="#按钮节流" class="headerlink" title="按钮节流"></a>按钮节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置按钮节流</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">fn, interval</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _self = fn,</span><br><span class="line">    timer,</span><br><span class="line">    firstTime = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span></span><br><span class="line">    _me = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">      _self.<span class="title function_">apply</span>(_me, args)</span><br><span class="line">      <span class="keyword">return</span> (firstTime = <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">      _self.<span class="title function_">apply</span>(_me, args)</span><br><span class="line">    &#125;, interval || <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按钮触发搜索、回车键绑定按钮"><a href="#按钮触发搜索、回车键绑定按钮" class="headerlink" title="按钮触发搜索、回车键绑定按钮"></a>按钮触发搜索、回车键绑定按钮</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮触发搜索</span></span><br><span class="line">btnSearch.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(search, <span class="number">1000</span>))</span><br><span class="line"><span class="comment">//回车触发搜索</span></span><br><span class="line">inputCity.<span class="property">onkeypress</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">which</span> === <span class="number">13</span>) &#123;</span><br><span class="line">    btnSearch.<span class="title function_">click</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Weather-Query-System&quot;&gt;&lt;a href=&quot;#Weather-Query-System&quot; class=&quot;headerlink&quot; title=&quot;Weather Query System&quot;&gt;&lt;/a&gt;Weather Query System&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="项目复盘" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="http://example.com/2022/09/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://example.com/2022/09/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-09-14T11:22:46.000Z</published>
    <updated>2022-09-20T09:08:00.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="❓-什么是模块化"><a href="#❓-什么是模块化" class="headerlink" title="❓ 什么是模块化"></a>❓ 什么是模块化</h2><p>将复杂的程序按照一定的规范封装成几个块，并组合在一起，模块中的<strong>数据与实现是私有的</strong>，只向外部<strong>暴露一些接口</strong>与其他模块通信。</p><h2 id="🚀-模块化的好处"><a href="#🚀-模块化的好处" class="headerlink" title="🚀 模块化的好处"></a>🚀 模块化的好处</h2><ul><li>避免命名冲突、污染全局</li><li>可以更好的分离，按需加载</li><li>更高的复用性、可移植性</li></ul><h2 id="👍-模块化的方法"><a href="#👍-模块化的方法" class="headerlink" title="👍 模块化的方法"></a>👍 模块化的方法</h2><h3 id="早期解决方案"><a href="#早期解决方案" class="headerlink" title="早期解决方案"></a>早期解决方案</h3><ol><li><p><strong>全局 <code>function</code> 模式</strong></p><ul><li>编码: 将不同的功能封装成不同的全局函数。</li><li>问题: 污染全局命名空间, 容易引起命名冲突或数据不安全，而且模块成员之间看不出直接关系。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>namespace</code> 模式</strong></p><ul><li>编码: 简单对象封装。</li><li>问题: 数据不安全(外部可以直接修改模块内部的数据)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo() <span class="subst">$&#123;<span class="variable language_">this</span>.data&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">myModule.<span class="property">data</span> = <span class="string">&#x27;other data&#x27;</span> <span class="comment">//能直接修改模块内部的数据</span></span><br><span class="line">myModule.<span class="title function_">foo</span>() <span class="comment">// foo() other data</span></span><br></pre></td></tr></table></figure></li><li><p><strong>基于对象用单例模式思想解决</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> someThing = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> otherThing = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">doSomeThing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(someThing)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; doSomeThing &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">myModule.<span class="title function_">doSomeThing</span>()</span><br></pre></td></tr></table></figure></li><li><p><strong>匿名函数自调用通过闭包解决(IIFE)</strong></p><ul><li>作用: 数据是私有的, 外部只能通过暴露的方法操作</li><li>编码: 将数据和行为封装到一个函数内部, 通过给 window 添加属性来向外暴露接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params">win</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">aFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  win.<span class="property">myMethod</span> = &#123; aFn, bFn &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure><ul><li>问题: 如果当前这个模块依赖另一个模块怎么办?</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line">;(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span>, $</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo() <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">    $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bar() <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">    <span class="title function_">otherFun</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">otherFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;otherFun()&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">myModule</span> = &#123; foo, bar &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, jQuery)</span><br></pre></td></tr></table></figure><ul><li>难以维护，依然要创建全局变量污染环境</li><li>请求过多，加载顺序需要手动管理</li><li>依赖模糊</li></ul></li></ol><h3 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h3><ul><li><p><strong>CommonJS</strong> (同步模块加载)</p><p>Node.js 采用的就是该规范，<strong>在服务器端，模块的加载是运行时同步加载的；在浏览器端，模块需要提前编译打包处理。</strong></p><p>每个文件都是一个模块。通过 <code>module.exports = value</code> &#x2F; <code>module.xxx = value</code> 暴露模块，其两者的区别为前者是代替，后者是添加。通过<code>require()</code>引入模块。</p><p><strong>特点</strong>:</p><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ul><p>CommonJS 模块是一个对象，它的 exports 属性（即 module.exports）是对外的接口。<strong>加载某个模块，其实是加载该模块的 module.exports 属性</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> addX = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">x</span> = x</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">addX</span> = addX</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var example = require(&#x27;./example.js&#x27;);</span><br><span class="line">console.log(example.x); // 5</span><br><span class="line">console.log(example.addX(1)); // 6</span><br></pre></td></tr></table></figure><p><strong>在浏览器中运行 CommonJS</strong>：使用 browserify。</p><p><em>Tip: <strong>CommonJS 模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</strong>。模块只会在第一次加载时运行一次，然后运行结果就被缓存，之后加载会直接读取缓存的结果，想要模块再次运行就必须先清除缓存。</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  counter,</span><br><span class="line">  incCounter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> test1 = <span class="built_in">require</span>(<span class="string">&#x27;./test1.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test1.<span class="property">counter</span>) <span class="comment">// 3</span></span><br><span class="line">test1.<span class="title function_">incCounter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test1.<span class="property">counter</span>) <span class="comment">// 3，未清除缓存</span></span><br></pre></td></tr></table></figure><p><code>test.js</code>模块加载以后，它的内部变化就影响不到输出的<code>test.counter</code>了。这是因为<code>test.counter</code>是一个原始类型的值，会被缓存。</p><p>除非写成一个函数，才能得到内部变动后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 写成一个函数</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">counter</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>AMD</strong> (异步模块加载)</p><p>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。但是，<strong>如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范</strong>。此外 AMD 规范比 CommonJS 规范在浏览器端实现要来得早。</p><p>RequireJS 是一个遵守 AMD 规范的工具库，可以通过<code>define</code>的方法将代码定义为模块，通过<code>require()</code>的方法实现模块的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义没有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;module1&#x27;</span>, <span class="string">&#x27;module2&#x27;</span>], <span class="keyword">function</span> (<span class="params">m1, m2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;module1&#x27;</span>, <span class="string">&#x27;module2&#x27;</span>], <span class="keyword">function</span> (<span class="params">m1, m2</span>) &#123;</span><br><span class="line">  使用m1 / m2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>ES6 模块</strong> (异步模块加载)</p><p>ES6 模块的设计思想是尽量的<strong>静态化</strong>，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p><p>通过 <code>export</code> (非默认暴露)&#x2F; <code>export default</code> (默认暴露)暴露模块，<code>import</code> 导入模块。非默认暴露时需要用中括号规范，并且在导入时解构赋值。默认暴露则不必。</p><p>若要在<code>Node.js</code>中使用 ESM，要求采用<code>.mjs</code>后缀文件名。也就是说，只要脚本文件里面使用<code>import</code>或者<code>export</code>命令，那么就必须采用<code>.mjs</code>后缀名。</p></li></ul><p><strong>ES6 和 CommonJS 模块的区别</strong>:</p><ol><li>CommonJS 模块输出的是一个值的拷贝，<strong>ES6 模块输出的是值的引用</strong>。</li><li><strong>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</strong>。</li><li>CommonJS 模块的<code>require()</code>是同步加载模块，ES6 模块的<code>import</code>命令是异步加载。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; counter, incCounter &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; incCounter, counter &#125; <span class="keyword">from</span> <span class="string">&#x27;./test.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 给导入变量赋值会报错</span></span><br><span class="line"><span class="comment">// counter = 4 //Assignment to constant variable.</span></span><br><span class="line"><span class="title function_">incCounter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>CommonJS 规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了 AMD、CMD 解决方案。</li><li>AMD 规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD 规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li><strong>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</strong>。</li></ul><h2 id="🔧-前端构建工具"><a href="#🔧-前端构建工具" class="headerlink" title="🔧 前端构建工具"></a>🔧 前端构建工具</h2><h3 id="什么时候使用构建工具？"><a href="#什么时候使用构建工具？" class="headerlink" title="什么时候使用构建工具？"></a>什么时候使用构建工具？</h3><ul><li>当你使用 less,scss 的时候想自动编译成浏览器认识的 css。</li><li>当你想将多个 js 文件自动合并到一起减少 http 请求的时候。<ul><li><em>当我们在<code>&lt;script&gt;</code>标签内引入 js 文件，或者在模块内使用<code>import</code>时，都会发送一个 http 请求。请求过多时页面消耗明显增加，当你在编译阶段将其合成为一个 bundle 时，就只需要发送一个 http 请求，在一定程度上提高了效率。</em></li></ul></li><li>自动开启一个服务器，修改了代码无需重新打开浏览器页面自动刷新了。</li><li>当你写了一个 ts 文件，它怎么自动转化为 js 文件被浏览器引入。</li><li>…more</li></ul><p><strong>webpack 核心概念</strong>:</p><ul><li><p><code>entry</code>入口</p><p><code>entry</code>告诉 webpack 应该从哪里开始构建内部依赖图处理依赖并输出到 bundles 里，默认是 src 文件下的 index.js。</p></li><li><p><code>output</code> 出口</p><p>告诉 webpack 如何输出它所构建的 bundles，包括路径、命名等，默认为根目录下的 dist 文件夹下。</p></li><li><p><code>loader</code> 预处理器</p><p>webpack 原则上只能处理<code>js</code>、<code>json</code>文件，而<code>loader</code>可以使 webpack 识别处理其他文件并转化为模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用css-loader来处理css</span></span><br><span class="line">npn install css-loader -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.css&#x27;</span>, <span class="comment">// 打包入口地址</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.css&#x27;</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">// 输出文件目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 转换规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//匹配所有的 css 文件</span></span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;css-loader&#x27;</span> <span class="comment">// use: 对应的 Loader 名称</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>plugin</code>插件</p><p>与 <code>loader</code> 用于转换特定类型的文件不同，<strong>插件（Plugin）可以贯穿 Webpack 打包的生命周期，执行不同的任务</strong>，是针对整个打包流程的插件处理（打包优化、资源管理、注入环境变量）</p><p>如果我想打包后的资源文件，例如：js 或者 css 文件可以自动引入到 Html 中，就需要使用插件<code>html-webpack-plugin</code>来帮助你完成这个操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 打包入口地址</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">// 输出文件目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//匹配所有的 css 文件</span></span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;css-loader&#x27;</span> <span class="comment">// use: 对应的 Loader 名称</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[ <span class="comment">// 配置插件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次打包的时候，打包目录都会遗留上次打包的文件，为了保持打包目录的纯净，我们需要在打包前将打包目录清空。这里我们可以使用插件<code>clean-webpack-plugin</code>来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm install clean-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>:[ <span class="comment">// 配置插件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>() <span class="comment">// 引入插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mode</code>模式</p><p>值为<code>production</code>、<code>development</code>、<code>none</code>中的一个，默认值为<code>production</code>。</p></li></ul><ol><li>在<strong>生产环境 production</strong>下，可以通过压缩代码来减小体积优化性能。</li><li>在<strong>开发环境 development</strong>下，省了代码优化步骤，可以使用<code>devtool: source-map</code>来清楚知道报错位置在哪。</li></ol><ul><li><p><code>devSever</code></p><p>开启一个本地服务器，实现热更新等服务。</p></li></ul><p><strong>webpack 的工作过程</strong>:</p><ol><li>从入口(entry)开始，<strong>递归</strong>入口文件所依赖的 module。</li><li>找到每一个 module，根据对应的 loader 转化这个 module。</li><li>然后，对 module 依赖的所有 module 进行转化，直到没有依赖。</li><li>其次，以入口文件(entry)为单位进行分组，一个 entry 和其所有的依赖 module 被分到一个块(Chunk)。</li><li>最后，webpack 会把所有 Chunk 转化成文件输出，在整个流程中会在恰当时期执行 plugin 里定义的扩展插件。</li></ol><p><strong>根据依赖打包的好处</strong>:</p><ul><li>pass 掉没有用到的静态资源。</li><li>多次引用一个依赖时可以分割出这个依赖，以免重复打包到 bundle 里。</li></ul><p><strong>webpack 安装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>需要同时安装<code>webpack</code>和<code>webpack-cli</code>(webpack 命令行工具)。</p><p>在<code>webpack.config.js</code>中配置 webpack。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 打包入口地址</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 输出文件目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><p>解决了 webpack 如下问题：</p><ol><li>构建 bundle 时间过长，服务器启动较慢。</li><li>更快的<code>hmr</code>(热更新)。</li><li>真正的按需编译。</li><li>配置简单，快速开发。</li></ol><h2 id="🐢-前端规范工具"><a href="#🐢-前端规范工具" class="headerlink" title="🐢 前端规范工具"></a>🐢 前端规范工具</h2><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>可以静态的推断与规定类型，便于维护项目，但是增加了开发成本。</p><h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><p>在项目开发中，往往都是多人协调开发，但是每个人的代码风格是不一样的，在团队维护的时候可能会面临很多的矛盾。那么工程化解决的一个重要的问题就是：使代码规范化。形成统一的代码风格。<code>ESLint</code>就是用来统一 JavaScript 代码风格的工具，即代码检验工具。</p><ul><li>ESLint 使用 Espree 解析 JavaScript。</li><li>ESLint 使用 AST 去分析代码中的模式。</li><li>ESLint 是完全插件化的。每一个规则都是一个插件并且你可以在运行时添加更多的规则。</li></ul><h2 id="🏠-Web-API"><a href="#🏠-Web-API" class="headerlink" title="🏠 Web API"></a>🏠 Web API</h2><p>应用程序接口（API，Application Programming Interface）</p><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>在 HTML5 中，为了解决 cookie 存储空间不足的问题(cookie 中每条 cookie 的存储空间为 4k)，增加了一个 localStorage，主要是用来作为本地存储的。</p><p><code>localStorage</code>  中的键值对总是以字符串的形式存储。</p><p>localStorage 中一般浏览器支持的容量大小是 5M，针对不同的浏览器，localStorage 容量大小会有所不同。</p><p><code>sessionStorage</code>：为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</p><p><code>localStorage</code>：同样功能，在浏览器关闭，然后重新打开后数据仍然存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>) <span class="comment">// 将value保存在key中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// 获取key值</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// 移除key值</span></span><br></pre></td></tr></table></figure><p>若让  <code>localStorage</code>  设置的某个  <strong>「key」</strong>  能在指定时间内自动失效。</p><ul><li>初级解法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expire = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">&#125;, expire)</span><br></pre></td></tr></table></figure><h3 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h3><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><h2 id="🚗-前端性能优化"><a href="#🚗-前端性能优化" class="headerlink" title="🚗 前端性能优化"></a>🚗 前端性能优化</h2><h3 id="回流、重绘"><a href="#回流、重绘" class="headerlink" title="回流、重绘"></a>回流、重绘</h3><p>首先浏览器会将 HTML 解析成 DOM，把 CSS 解析成 CSSOM，再将其结合产生<code>render tree</code>。</p><p>当渲染树 render tree 中的一些元素需要更新样式，但这些样式属性只是改变元素的外观，风格，而不会影响布局的，比如<code>background-color</code>。则就叫称为<strong>重绘(repaint)</strong> 。</p><p><strong>简单来说，重绘就是将渲染树节点转换为屏幕上的实际像素，不涉及重新布局阶段的位置与大小计算</strong></p><p>当<code>render tree</code>中的元素因为尺寸、布局、隐藏等改变需要重新构建，称为**回流(reflow)**。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分的<code>render tree</code>。</p><p>完成回流后，浏览器会重新绘制受到影响的部分到屏幕，该过程为重绘。</p><p><strong>简单来说，回流就是计算元素在设备内的确切位置和大小并且重新绘制。</strong></p><p>回流的代价要远大于重绘。</p><p><strong>并且回流必然会造成重绘，但重绘不一定会造成回流</strong></p><p><strong>会导致回流的操作</strong>:</p><ol><li><strong>页面首次渲染</strong>（无法避免，且开销最大）</li><li><strong>浏览器窗口</strong>大小发生变化</li><li>元素尺寸&#x2F;位置发生改变</li><li>元素内容变化</li><li>元素字体大小</li><li>添加&#x2F;删除<strong>可见</strong>的 DOM</li><li>css 伪类</li><li>查询属性&#x2F;调用方法</li></ol><p><strong>如何减少回流、重绘</strong>:</p><ol><li>合并样式修改</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"></span><br><span class="line">el.<span class="property">style</span>.<span class="property">margin</span> = <span class="string">&#x27;5px&#x27;</span></span><br><span class="line">el.<span class="property">style</span>.<span class="property">borderRadius</span> = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">el.<span class="property">style</span>.<span class="property">boxShadow</span> = <span class="string">&#x27;1px 3px 4px #ccc&#x27;</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">update</span>&#123;</span><br><span class="line">  <span class="attr">margin</span>: 5px;</span><br><span class="line">  border-<span class="attr">dadius</span>: 12px;</span><br><span class="line">  box-<span class="attr">shadow</span>: 1px 3px 4px #ccc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;update&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>避免使用 table 布局</p></li><li><p>CSS 选择符从有往左匹配查找，避免节点层级过多</p></li><li><p><strong>DOM 离线处理，减少回流重绘次数</strong></p><p>离线的 DOM 不属于当前 DOM 树中的任何一部分，这也就意味着我们对离线 DOM 处理就不会引起页面的回流与重绘。</p><p>使用<code>display: none</code>，将元素从渲染树中完全移除，之后再在该 DOM 上操作，就不会触发回流重绘，最后将 display 改为显示，就只会触发这一次回流重绘。</p><p>Tip: <code>visibility: hidden</code> 的元素只对重绘有影响，不影响重排。</p><p>使用<code>documentFragment</code>创建一个 dom 文档片段，在它上面批量操作 dom，完成之后再添加到文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;front&#x27;</span>, <span class="string">&#x27;nanjiu&#x27;</span>, <span class="string">&#x27;study&#x27;</span>, <span class="string">&#x27;code&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  li.<span class="property">innerHTML</span> = item</span><br><span class="line">  fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">appendChild</span>(fragment)</span><br></pre></td></tr></table></figure><p>DOM 脱离普通文本流</p><p>使用<code>absulute</code>&#x2F;<code>fixed</code>让元素脱离普通文本流，使用绝对定位会使改元素单独成为渲染树中 body 的一个子元素，重流开销较小。</p></li><li><p>CSS3 硬件加速(GPU 加速)</p><p>使用<code>transform</code>、<code>opacity</code>、<code>filters</code>，不会引起回流重绘。</p></li></ol>]]></content>
    
    
    <summary type="html">模块化就是将复杂的程序按照一定的规范封装成几个块，并组合在一起，模块中的数据与实现是私有的，只向外部暴露一些接口与其他模块通信。能够避免命名冲突、污染全局，可以更好的分离，按需加载，更高的复用性、可移植性等。使以前的难以维护，依然要创建全局变量污染环境、请求过多，加载顺序需要手动管理、依赖模糊得到了很好的解决...</summary>
    
    
    
    
    <category term="模块化" scheme="http://example.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
